if(stringr::str_detect(target_genus_title,pattern="ID")){ #a single related species found
summary_related_element <-genbank_genus_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_related_size <- summary_related_element$X2[grep("total length", summary_related_element$X2)]
target_related_size_vec <- strsplit(target_related_size, ":") %>% unlist
genome_size_vec[i] <- round(as.numeric(target_related_size_vec[2]),digits=0)
}else{
multi_related_list <- multi_species_genome_list(genus_name)
no_related_exist[i]  <- multi_related_list[1]
multi_related_list <- multi_related_list[-1]
multi_genome_size <- vector()
for(j in 1:no_related_exit[i]){
multi_genome_size[j] <- genome_size_sp_GenBank(multi_related_list[j])
}
genome_size_vec[i] <- round(mean(multi_genome_size),digits=0)
}
}else{# No items found in the genus
no_related_exist[i] <- 0
}
Sys.sleep(1)
}
}
aa <- 2
bb <- c("a","b")
ab <- list(aa,bb)
aa[[1]]
aa[[2]]
aa[2]
aa[1]
ab[1]
ab[[1]]
ab[[2]]
# Loading packages
library(tidyverse)
library(rvest)
fishes_raw <- read_csv("FRA200List_Latin.csv")
#fishes <- read_csv("FRA200List_Latin.test.csv")
#filtering out species with NA
fishes <- fishes_raw %>% drop_na()
no_fish <- nrow(fishes) #number of fishes in the list
#no_fish <- 5 # for test
#fishes <- fishes[1:no_fish,]
genome_assembly_exist <- vector()
genome_size_vec <- vector() # target species / a related species / mean within genus
genome_assembly_genus_exist <- vector()
no_related_exist <- vector()
genome_size_sp_GenBank <- function(genus, species){
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
genbank_genome_url <- paste0(genbank_genome_head,genus,"+",species)
genbank_html <- read_html(genbank_genome_url)
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
summary_element <- genbank_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_size <-
summary_element$X2[grep("total length", summary_element$X2)]
target_size_vec <- strsplit(target_size, ":") %>% unlist
genome_size_out <- round(as.numeric(target_size_vec[2]),digits=0)
return(genome_size_out)
}
Sys.sleep(1) #
}
multi_species_genome_list <- function(genus_name){
multi_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
multi_genome_url <- paste0(multi_genome_head,genus_name)
multi_html <- read_html(multi_genome_url)
#no_related
multi_items <- multi_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(multi_items, " ") %>% unlist
no_related  <- items_vec[2]
species_vec <- vector()
for(i in 1:no_related){
species_vec[i] <-  NIH_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[5]/div[1]/div[2]/p') %>%
html_text()
}
output <- list(no_related,species_vec)
return(out_put)
Sys.sleep(1) #
}
# example https://www.ncbi.nlm.nih.gov/genome/?term=Gadus+morhua
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
for(i in 1:no_fish){
genus_species_name <- strsplit(fishes[i,]$Scientific_name, " ") %>% unlist # split genus/species names
genus_name <- genus_species_name[1]
species_name <- genus_species_name[2]
genbank_genome_url <- paste0(genbank_genome_head,genus_name,"+",species_name)
genbank_html <- read_html(genbank_genome_url)
#extracting title element
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
genome_assembly_exist[i] <- 1 # genome assembly found at species level
genome_assembly_genus_exist <- 1  # genome assembly found at genus level
genome_size_vec[i] <- genome_size_sp_GenBank(genus_name,species_name)
#Check related species
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="ID"))){ #if multiple related species found
target_genus_items <- genbank_genus_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(target_genus_items, " ") %>% unlist
no_related_exist[i]  <- items_vec[2]
}else{
no_related_exist[i] <- 1
}
Sys.sleep(1) #
}else{
genome_assembly_exist[i] <- 0 # no genome assembly found at species level
genome_size_vec[i] <- NA
# search at genus level
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="No items found"))){
no_related_exist[i] <- 1 # items found at genus level
if(stringr::str_detect(target_genus_title,pattern="ID")){ #a single related species found
summary_related_element <-genbank_genus_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_related_size <- summary_related_element$X2[grep("total length", summary_related_element$X2)]
target_related_size_vec <- strsplit(target_related_size, ":") %>% unlist
genome_size_vec[i] <- round(as.numeric(target_related_size_vec[2]),digits=0)
}else{
multi_related_list <- multi_species_genome_list(genus_name)
no_related_exist[i]  <- multi_related_list[[1]]
multi_related_list <- multi_related_list[[2]]
multi_genome_size <- vector()
for(j in 1:no_related_exit[i]){
multi_genome_size[j] <- genome_size_sp_GenBank(multi_related_list[j])
}
genome_size_vec[i] <- round(mean(multi_genome_size),digits=0)
}
}else{# No items found in the genus
no_related_exist[i] <- 0
}
Sys.sleep(1)
}
}
# Loading packages
library(tidyverse)
library(rvest)
fishes_raw <- read_csv("FRA200List_Latin.csv")
#fishes <- read_csv("FRA200List_Latin.test.csv")
#filtering out species with NA
fishes <- fishes_raw %>% drop_na()
no_fish <- nrow(fishes) #number of fishes in the list
#no_fish <- 5 # for test
#fishes <- fishes[1:no_fish,]
genome_assembly_exist <- vector()
genome_size_vec <- vector() # target species / a related species / mean within genus
genome_assembly_genus_exist <- vector()
no_related_exist <- vector()
genome_size_sp_GenBank <- function(genus, species){
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
genbank_genome_url <- paste0(genbank_genome_head,genus,"+",species)
genbank_html <- read_html(genbank_genome_url)
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
summary_element <- genbank_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_size <-
summary_element$X2[grep("total length", summary_element$X2)]
target_size_vec <- strsplit(target_size, ":") %>% unlist
genome_size_out <- round(as.numeric(target_size_vec[2]),digits=0)
return(genome_size_out)
}
Sys.sleep(1) #
}
multi_species_genome_list <- function(genus_name){
multi_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
multi_genome_url <- paste0(multi_genome_head,genus_name)
multi_html <- read_html(multi_genome_url)
#no_related
multi_items <- multi_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(multi_items, " ") %>% unlist
no_related  <- items_vec[2]
species_vec <- vector()
for(i in 1:no_related){
species_vec[i] <-  NIH_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[5]/div[1]/div[2]/p') %>%
html_text()
}
output <- list(no_related,species_vec)
return(output)
Sys.sleep(1) #
}
# example https://www.ncbi.nlm.nih.gov/genome/?term=Gadus+morhua
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
for(i in 1:no_fish){
genus_species_name <- strsplit(fishes[i,]$Scientific_name, " ") %>% unlist # split genus/species names
genus_name <- genus_species_name[1]
species_name <- genus_species_name[2]
genbank_genome_url <- paste0(genbank_genome_head,genus_name,"+",species_name)
genbank_html <- read_html(genbank_genome_url)
#extracting title element
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
genome_assembly_exist[i] <- 1 # genome assembly found at species level
genome_assembly_genus_exist <- 1  # genome assembly found at genus level
genome_size_vec[i] <- genome_size_sp_GenBank(genus_name,species_name)
#Check related species
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="ID"))){ #if multiple related species found
target_genus_items <- genbank_genus_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(target_genus_items, " ") %>% unlist
no_related_exist[i]  <- items_vec[2]
}else{
no_related_exist[i] <- 1
}
Sys.sleep(1) #
}else{
genome_assembly_exist[i] <- 0 # no genome assembly found at species level
genome_size_vec[i] <- NA
# search at genus level
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="No items found"))){
no_related_exist[i] <- 1 # items found at genus level
if(stringr::str_detect(target_genus_title,pattern="ID")){ #a single related species found
summary_related_element <-genbank_genus_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_related_size <- summary_related_element$X2[grep("total length", summary_related_element$X2)]
target_related_size_vec <- strsplit(target_related_size, ":") %>% unlist
genome_size_vec[i] <- round(as.numeric(target_related_size_vec[2]),digits=0)
}else{
multi_related_list <- multi_species_genome_list(genus_name)
no_related_exist[i]  <- multi_related_list[[1]]
multi_related_list <- multi_related_list[[2]]
multi_genome_size <- vector()
for(j in 1:no_related_exit[i]){
multi_genome_size[j] <- genome_size_sp_GenBank(multi_related_list[j])
}
genome_size_vec[i] <- round(mean(multi_genome_size),digits=0)
}
}else{# No items found in the genus
no_related_exist[i] <- 0
}
Sys.sleep(1)
}
}
# Loading packages
library(tidyverse)
library(rvest)
fishes_raw <- read_csv("FRA200List_Latin.csv")
#fishes <- read_csv("FRA200List_Latin.test.csv")
#filtering out species with NA
fishes <- fishes_raw %>% drop_na()
no_fish <- nrow(fishes) #number of fishes in the list
#no_fish <- 5 # for test
#fishes <- fishes[1:no_fish,]
genome_assembly_exist <- vector()
genome_size_vec <- vector() # target species / a related species / mean within genus
genome_assembly_genus_exist <- vector()
no_related_exist <- vector()
genome_size_sp_GenBank <- function(genus, species){
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
genbank_genome_url <- paste0(genbank_genome_head,genus,"+",species)
genbank_html <- read_html(genbank_genome_url)
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
summary_element <- genbank_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_size <-
summary_element$X2[grep("total length", summary_element$X2)]
target_size_vec <- strsplit(target_size, ":") %>% unlist
genome_size_out <- round(as.numeric(target_size_vec[2]),digits=0)
return(genome_size_out)
}
Sys.sleep(1) #
}
multi_species_genome_list <- function(genus_name){
multi_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
multi_genome_url <- paste0(multi_genome_head,genus_name)
multi_html <- read_html(multi_genome_url)
#no_related
multi_items <- multi_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(multi_items, " ") %>% unlist
no_related  <- items_vec[2]
species_vec <- vector()
for(i in 1:no_related){
species_vec[i] <-  NIH_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[5]/div[1]/div[2]/p') %>%
html_text()
}
output <- list(no_related,species_vec)
return(output)
Sys.sleep(1) #
}
# example https://www.ncbi.nlm.nih.gov/genome/?term=Gadus+morhua
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
for(i in 1:no_fish){
genus_species_name <- strsplit(fishes[i,]$Scientific_name, " ") %>% unlist # split genus/species names
genus_name <- genus_species_name[1]
species_name <- genus_species_name[2]
genbank_genome_url <- paste0(genbank_genome_head,genus_name,"+",species_name)
genbank_html <- read_html(genbank_genome_url)
#extracting title element
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
genome_assembly_exist[i] <- 1 # genome assembly found at species level
genome_assembly_genus_exist <- 1  # genome assembly found at genus level
genome_size_vec[i] <- genome_size_sp_GenBank(genus_name,species_name)
#Check related species
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="ID"))){ #if multiple related species found
target_genus_items <- genbank_genus_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(target_genus_items, " ") %>% unlist
no_related_exist[i]  <- items_vec[2]
}else{
no_related_exist[i] <- 1
}
Sys.sleep(1) #
}else{
genome_assembly_exist[i] <- 0 # no genome assembly found at species level
genome_size_vec[i] <- NA
# search at genus level
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="No items found"))){
no_related_exist[i] <- 1 # items found at genus level
if(stringr::str_detect(target_genus_title,pattern="ID")){ #a single related species found
summary_related_element <-genbank_genus_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_related_size <- summary_related_element$X2[grep("total length", summary_related_element$X2)]
target_related_size_vec <- strsplit(target_related_size, ":") %>% unlist
genome_size_vec[i] <- round(as.numeric(target_related_size_vec[2]),digits=0)
}else{
multi_related_list <- multi_species_genome_list(genus_name)
no_related_exist[i]  <- multi_related_list[[1]]
multi_related_list <- multi_related_list[[2]]
multi_genome_size <- vector()
for(j in 1:no_related_exist[i]){
multi_genome_size[j] <- genome_size_sp_GenBank(multi_related_list[j])
}
genome_size_vec[i] <- round(mean(multi_genome_size),digits=0)
}
}else{# No items found in the genus
no_related_exist[i] <- 0
}
Sys.sleep(1)
}
}
# Loading packages
library(tidyverse)
library(rvest)
fishes_raw <- read_csv("FRA200List_Latin.csv")
#fishes <- read_csv("FRA200List_Latin.test.csv")
#filtering out species with NA
fishes <- fishes_raw %>% drop_na()
no_fish <- nrow(fishes) #number of fishes in the list
#no_fish <- 5 # for test
#fishes <- fishes[1:no_fish,]
genome_assembly_exist <- vector()
genome_size_vec <- vector() # target species / a related species / mean within genus
genome_assembly_genus_exist <- vector()
no_related_exist <- vector()
genome_size_sp_GenBank <- function(genus, species){
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
genbank_genome_url <- paste0(genbank_genome_head,genus,"+",species)
genbank_html <- read_html(genbank_genome_url)
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
summary_element <- genbank_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_size <-
summary_element$X2[grep("total length", summary_element$X2)]
target_size_vec <- strsplit(target_size, ":") %>% unlist
genome_size_out <- round(as.numeric(target_size_vec[2]),digits=0)
return(genome_size_out)
}
Sys.sleep(1) #
}
multi_species_genome_list <- function(genus_name){
multi_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
multi_genome_url <- paste0(multi_genome_head,genus_name)
multi_html <- read_html(multi_genome_url)
#no_related
multi_items <- multi_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(multi_items, " ") %>% unlist
no_related  <- items_vec[2]
species_vec <- vector()
for(i in 1:no_related){
species_vec[i] <-  NIH_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[5]/div[1]/div[2]/p') %>%
html_text()
}
output <- list(no_related,species_vec)
return(output)
Sys.sleep(1) #
}
# example https://www.ncbi.nlm.nih.gov/genome/?term=Gadus+morhua
genbank_genome_head <- "https://www.ncbi.nlm.nih.gov/genome/?term="
for(i in 1:no_fish){
genus_species_name <- strsplit(fishes[i,]$Scientific_name, " ") %>% unlist # split genus/species names
genus_name <- genus_species_name[1]
species_name <- genus_species_name[2]
genbank_genome_url <- paste0(genbank_genome_head,genus_name,"+",species_name)
genbank_html <- read_html(genbank_genome_url)
#extracting title element
target_title <- genbank_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_title,pattern="No items found"))){
genome_assembly_exist[i] <- 1 # genome assembly found at species level
genome_assembly_genus_exist <- 1  # genome assembly found at genus level
genome_size_vec[i] <- genome_size_sp_GenBank(genus_name,species_name)
#Check related species
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="ID"))){ #if multiple related species found
target_genus_items <- genbank_genus_html %>%
html_element(xpath = '//*[@id="maincontent"]/div/div[3]/div/h3') %>%
html_text()
items_vec <- strsplit(target_genus_items, " ") %>% unlist
no_related_exist[i]  <- items_vec[2]
}else{
no_related_exist[i] <- 1
}
Sys.sleep(1) #
}else{
genome_assembly_exist[i] <- 0 # no genome assembly found at species level
genome_size_vec[i] <- NA
# search at genus level
genbank_genome_genus_url <- paste0(genbank_genome_head,genus_name)
genbank_genus_html <- read_html(genbank_genome_genus_url)
target_genus_title <- genbank_genus_html %>% html_element(xpath = "/html/head/title") %>% html_text()
if(!(stringr::str_detect(target_genus_title,pattern="No items found"))){
no_related_exist[i] <- 1 # items found at genus level
if(stringr::str_detect(target_genus_title,pattern="ID")){ #a single related species found
summary_related_element <-genbank_genus_html %>%
html_element(xpath = '//*[@id="mmtest1"]/div/div/div/table') %>%
html_table()
target_related_size <- summary_related_element$X2[grep("total length", summary_related_element$X2)]
target_related_size_vec <- strsplit(target_related_size, ":") %>% unlist
genome_size_vec[i] <- round(as.numeric(target_related_size_vec[2]),digits=0)
}else{
multi_related_list <- multi_species_genome_list(genus_name)
no_related_exist[i]  <- multi_related_list[[1]]
multi_related_list <- multi_related_list[[2]]
multi_genome_size <- vector()
for(j in 1:no_related_exist[i]){
sp_name_recover <- strsplit(multi_related_list[j], " ") %>% unlist
multi_genome_size[j] <- genome_size_sp_GenBank(sp_name_recover[1],sp_name_recover[2])
}
genome_size_vec[i] <- round(mean(multi_genome_size),digits=0)
}
}else{# No items found in the genus
no_related_exist[i] <- 0
}
Sys.sleep(1)
}
}
fishes_genome <- fishes %>%
mutate (Assembly = genome_assembly_exist, Assembly_related = no_related_exist, Genome_size = genome_size_vec)  %>% select(-SingleMulti,-TAC,-Target)
write_csv(fishes_genome, "fishes_genome_size.csv")
# Loading packages
library(tidyverse)
# Current standard Japanese/scientific names of all fish species recorded from Japanese waters
#https://www.museum.kagoshima-u.ac.jp/staff/motomura/jaf.html
JAFList <- read_csv("20220821_JAFList.csv")
# Species list of fisheries resources
FRA200List <- read_csv("FRA200List.csv")
no_fish <- nrow(FRA200List)
scientific_name_vec <- vector()
Family_vec <- vector()
for(i in 1:no_fish){
target_fish <- FRA200List[i,1][[1]]
target_fish_ID <- which(JAFList$和名==target_fish)
scientific_name <- JAFList$学名[target_fish_ID]
Family <-JAFList$Family[target_fish_ID]
#	gsub("\n", " ", Family)
#	if(str_extract(Family, pattern="Epinephelidae")){
#	  Family <- "Epinephelidae"
#	}
if(!(identical(scientific_name,character(0)))){#if non-fish species
Family_vec[i] <- Family
scientific_name_vec[i] <- scientific_name
}else{
Family_vec[i] <- NA
scientific_name_vec[i] <- NA
}
}
FRA200List_Latin <- FRA200List %>%
mutate(Family = Family_vec, Scientific_name = scientific_name_vec) %>%
arrange(Category, Family, Scientific_name)
write_csv(FRA200List_Latin, "FRA200List_Latin.csv")
